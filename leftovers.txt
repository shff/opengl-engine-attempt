
//
// Resource Path
//

id resourcePath =
    [[NSBundle mainBundle] pathForResource:@"data" ofType:@"z"];

//
// Hidden title
//

| NSFullSizeContentViewWindowMask | NSWindowTitleHidden
[window setTitlebarAppearsTransparent:YES];

//
// Mouse lock
//

NSRect globalRect = [window
    convertRectToScreen:NSMakeRect([view frame].size.width / 2,
                                   [view frame].size.height / 2, 0, 0)];
CGWarpMouseCursorPosition(CGPointMake(
    globalRect.origin.x,
    CGDisplayBounds(CGMainDisplayID()).size.height -
    globalRect.origin.y));
[NSCursor hide];
CGAssociateMouseAndMouseCursorPosition(false);

//
// Mouse
//

if ([event type] == NSMouseMoved)
{
  [window setTitle:[NSString stringWithFormat:@"Mouse moved: %f %f",
    [event deltaX], [event deltaY]]];

  // Mouse position:
  NSRect contentRect = [view frame];
  NSPoint pos = [window mouseLocationOutsideOfEventStream];
  if ([view mouse:pos inRect:[view bounds]])
    [window
        setTitle:[NSString stringWithFormat:@"Mouse at %f %f", pos.x,
                                            contentRect.size.height -
                                                pos.y - 1]];
}

//
// Timer
//

// Get Timer Frequency
mach_timebase_info_data_t timerInfo;
mach_timebase_info(&timerInfo);
unsigned long long timerFreq =
    (unsigned long long)(1e9 * timerInfo.denom) / timerInfo.numer;

double fps = 50.0;
double lag = 0.0;
double timerCurrent = (double)(mach_absolute_time()) / timerFreq;

double timerNext = (double)(mach_absolute_time()) / timerFreq;
double timerElapsed = timerNext - timerCurrent;
timerCurrent = timerNext;

for (lag += timerElapsed; lag >= 1.0 / fps; lag -= 1.0 / fps)
{
}
